## 필드와 컬럼 매핑

### 매핑 어노테이션 정리

hibernate.hbm2ddl.auto

- `@Column`: 컬럼 매핑
- `@Temporal`: 날짜 타입 매핑
- `@Enumerted`: enum 매핑
- `@Lob`: BLOB, CLOB 매핑
- `@Transient`: 특정 필드를 컬럼에 매핑하지 않음 (매핑 무시)

### @Column

`속성`: `설명` [`기본값`]

- name: 필드와 매핑할 테이블의 컬럼 이름 [객체의 필드 이름]
- insertable, updateable: 등록, 변경 가능 여부 [TRUE]
- nullable(DDL): null 값의 허용 여부를 정한다. false로 설정하면 DDL 생성시에 not null 제약 조건이 붙는다.
- unique(DDL): @Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 때 사용한다.
- columnDefinition: 데이터베이스 컬럼 정보를 직접 줄 수 있다. (ex. varchar(100) default 'EMPTY') [필드의 자바 타입과 방언 정보를 사용해]
- length(DDL): 문자 길이 제약조건, String 타입에만 사용한다. [255]
- precision scale(DDL): BigDecimal 타입에서 사용한다. (BigInteger도 사용 가능) precision은 소수점을 포함한 전체 자릿수를, scale은 소수의 자릿수다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나 정밀한 소수를 다루어야할 때만 사용한다. [precision = 19,  scale = 2]

### @Enumerated

- 속성: value [기본값: EnumType.ORDINAL]
    - EnumType.ORDINAL: enum 순서를 데이터베이스에 저장
    - EnumType.STRING: enum 이름을 데이터 베이스에 저장
- **주의! ORDINAL 사용 X**
    - 순서대로 사용될 경우,  enum 클래스 중간에 새로운 속성을 넣었을 때 기존 DB의 순서와 enum의 순서가 섞일 수 있다.

### @Temporal

- 날짜 타입(java.util.Date, java.util.Calendar)을 매핑할 때 사용
- 참고: LocalDate, LocalDateTime을 사용할 때는 생략 가능 (최신 하이버네이트 지원)
- 속성: value
    - TemporalType.DATE: 날짜, 데이터베이스 date 타입과 매핑 (예: 2013-10-11)
    - TemporalType.TIME: 시간, 데이터베이스 time과 매핑 (예: 11:11:11)
    - TemporalType.TIMESTAMP: 날짜와 시간, 데이터베이스 timestamp 타입과 매핑 (예: 2013-10-11 11:11:11)

### @Lob

- 데이터베이스 BLOB, CLOB 타입과 매핑
- @Lob에는 지정할 수 있는 속성이 없다.
- 매핑하는 필드 타입이 문자면 CLOB 매핑, 나머지는 BLOB 매핑
    - CLOB: String, char[], java.sql.CLOB
    - BLOB: byte[], java.sql.BLOB

### @Transient

- 필드 매핑 X
- 데이터베이스에 저장 X, 조회 X
- 주로 메모상에서만 임시로 어떤 값을 보관하고 싶을 때 사용

## 기본키 매핑

### 기본키 매핑 어노테이션

- @Id
- @GeneratedValue

```java
@Id @GeneratedValue(strategy = GenerationType.AUTO)
private Long id;
```

### 기본키 매핑 방법

- 직접 할당: @Id만 사용
- 자동 생성 (@GeneratedValue)
    - IDENTITY: 데이터베이스에 위임, MYSQL
    - SEQUENCE: 데이터베이스 시퀀스 오브젝트 사용, ORACLE
        - @SequenceGenerator 필요
    - TABLE: 키 생성용 테이블 사용, 모든 DB에서 사용
        - @TableGenerator 필요
    - AUTO: 방언에 따라 자동 지정, 기본값

### IDENTITY 전략 - 특징

- 기본 키 생성을 데이터베이스에 위임
- 주로 MySQL, PostgreSQL, SQL Server, DB2에서 사용 (예: MYSQL의 AUTO_INCREMENT)
- JPA는 보통 트랜잭션 커밋 시점에 INSERT SQL 실행
- AUTO_INCREMENT는 **데이터베이스에 INSERT SQL을 실행한 이후에 ID 값을 알 수 있음**
- IDENTITY 전략은 **entityManager.persist() 시점에 즉시 INSERT SQL을 실행하고 DB에서 식별자를 조회**
    - **데이터 베이스에 commit 할 때 쿼리가 실행되는것이 아니다!!**

### SEQUENCE 전략 - 특징

- 데이터베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트 (예: 오라클 시퀀스)
- 오라클, PostgreSQL, DB2, H2 데이터베이스에서 사용

```java
@Entity
@SequenceGenerator(
        name = "MEMBER_SEQ_GENERATOR",
        sequenceName = "MEMBER_SEQ",
        initialValue = 1, allocationSize = 1
)
public class Member {

    @Id
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "MEMBER_SEQ_GENERATOR"
    )
    private Long id;
}
```

### SEQUENCE - @SequenceGenerator

`속성`: `설명` [`기본값`]

- name: 식별자 생성기 이름 [필수]
- sequenceName: 데이터베이스에 등록되어 있는 시퀀스 이름 [hibernate_sequence]
- initalValue: DDL 생성 시에만 사용됨, 시퀀스 DDL을 생성할 때 처음 시작하는 수를 지정한다. [1]
- allocationSize: 시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨, 데이터베이스 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 이 값을 반드시 1로 설정해야한다) [50]
- catalog, schema: 데이터베이스 catalog, schema 이름

### TABLE 전략

- 키 생성 전용 테이블을 하나 만들어서 데이터베이스 시퀀스를 흉내내는 전략
- 장점: 모든 데이터베이스에 적용 가능
- 단점: 성능

```java
@Entity
@TableGenerator(
        name = "MEMBER_SEQ_GENERATOR",
        table = "MY_SEQUENCES",
        pkColumnValue = "MEMBER_SEQ", allocationSize = 1
)
public class Member {

    @Id
    @GeneratedValue(
            strategy = GenerationType.TABLE,
            generator = "MEMBER_SEQ_GENERATOR"
    )
    private Long id;
}
```

- 실행 결과
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1ae05cec-1c79-47e5-ac05-5a5ce81a8b5e/Untitled.png)
    

### 권장하는 식별자 전략

- **기본 키 제약 조건**: NULL 아님, 유일, **변하면 안된다.**
- 미래까지 이 조건을 만족하는 자연키는 찾기 어렵다. 대리키(대체키)를 사용하자
- 예를 들어 주민등록 번호도 기본키로 적절하지 않다. (변경 가능하기 때문)
- **권장: Long형 + 대체키 + 키 생성전략 사용**

### allocationSize

- 시퀀스 한 번 호출에 증가하는 수 (성능 최적화에 사용됨)
- 50으로 설정되어 있다면 데이터베이스에서 50개를 미리 땡겨온 다음 사용한다.
- 사용할 때마다 DB에서 가져오는 것이 아니다. 메모리에 50개를 저장해놓고 사용!